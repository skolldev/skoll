    const { isLoading, error, data } = useQuery<IWeightData[]>("data", () =>
    fetch("/api/data").then((res) => res.json())
  );

  if (isLoading) return <div>Loading...</div>;

  if (error) return <div>An error has occurred: + {error};</div>;

  
  const mappedActual = data.map(({ weight, date }) => ({ x: date, y: weight }));
  const mappedTrend = data.map(({ weightTrend, date }) => ({
    x: date,
    y: weightTrend,
  }));

  console.log(mappedTrend);

  const actual = {
    id: "actual",
    data: mappedActual,
  };

  const trend = {
    id: "trend",
    data: mappedTrend,
  };

  <ResponsiveLine
          data={[actual, trend]}
          curve="monotoneX"
          margin={{ top: 50, right: 110, bottom: 50, left: 60 }}
          yScale={{ type: "linear", min: 85, max: 105 }}
          xScale={{ format: "%Y-%m-%d %H:%M:%S", type: "time", useUTC: false }}
          xFormat="time:%d.%m.%Y"
          axisTop={null}
          axisRight={null}
          axisBottom={{
            format: "%b %y",
            tickValues: "every month",
            tickRotation: 90,
            legend: "date",
            legendOffset: 60,
            legendPosition: "middle",
          }}
          axisLeft={{
            orient: "left",
            tickSize: 5,
            tickPadding: 5,
            tickRotation: 0,
            legend: "weight",
            legendOffset: -40,
            legendPosition: "middle",
          }}
          enableGridY={false}
          colors={{ scheme: "nivo" }}
          enablePoints={false}
          pointSize={10}
          pointColor={{ theme: "background" }}
          pointBorderWidth={2}
          pointBorderColor={{ from: "serieColor" }}
          pointLabel="y"
          pointLabelYOffset={-12}
          enableSlices="x"
          legends={[
            {
              anchor: "bottom-right",
              direction: "column",
              justify: false,
              translateX: 100,
              translateY: 0,
              itemsSpacing: 0,
              itemDirection: "left-to-right",
              itemWidth: 80,
              itemHeight: 20,
              itemOpacity: 0.75,
              symbolSize: 12,
              symbolShape: "circle",
              symbolBorderColor: "rgba(0, 0, 0, .5)",
              effects: [
                {
                  on: "hover",
                  style: {
                    itemBackground: "rgba(0, 0, 0, .03)",
                    itemOpacity: 1,
                  },
                },
              ],
            },
          ]}
        />